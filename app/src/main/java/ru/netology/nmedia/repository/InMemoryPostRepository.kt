package ru.netology.nmedia.repository

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import ru.netology.nmedia.dto.Post

class InMemoryPostRepository: PostRepository {
    private var posts = listOf(Post(
        1,
        "Нетология. Университет интернет-профессий",
        "",
        "21 мая в 18:36",
        10,
        false,
        5,
        false,
        "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растем сами и помогаем расти студентам:от новичков до уверенных профессионалов. Но самое важное остается с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целится выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен -> http//netolo.gy/fyb",
        0,
        "https://www.youtube.com/watch?v=WhWc3b3KhnY"
    ), Post(
        2,
        "Нетология. Университет интернет-профессий",
        "",
        "21 мая в 18:45",
        20,
        false,
        2,
        false,
        "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растем сами и помогаем расти студентам:от новичков до уверенных профессионалов. Но самое важное остается с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целится выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен -> http//netolo.gy/fyb",
        0,
        "https://www.youtube.com/"
    ), Post(
        3,
        "Нетология. Университет интернет-профессий",
        "",
        "21 мая в 19:00",
        15,
        false,
        5,
        false,
        "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растем сами и помогаем расти студентам:от новичков до уверенных профессионалов. Но самое важное остается с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целится выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен -> http//netolo.gy/fyb",
        0
    ), Post(
        4,
        "Нетология. Университет интернет-профессий",
        "",
        "21 мая в 19:20",
        10,
        false,
        1,
        false,
        "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растем сами и помогаем расти студентам:от новичков до уверенных профессионалов. Но самое важное остается с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целится выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен -> http//netolo.gy/fyb",
        0
    ), Post(
        5,
        "Нетология. Университет интернет-профессий",
        "",
        "21 мая в 19:46",
        20000000,
        false,
        3333,
        false,
        "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растем сами и помогаем расти студентам:от новичков до уверенных профессионалов. Но самое важное остается с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целится выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен -> http//netolo.gy/fyb",
        0
    )

    )
    private val data = MutableLiveData(posts)
    override fun getAll(): LiveData<List<Post>> = data
    override fun likeById(id:Long) {
        posts = posts.map {
            if (it.id != id) it else it.copy(liked = !it.liked,
                likes = if(it.liked) it.likes -1 else it.likes +1)
        }
        data.value=posts
    }

    override fun removeById(id: Long) {
        posts=posts.filter { it.id != id }
        data.value=posts
    }


    override fun shareById(id:Long) {
        posts = posts.map {
            if(it.id != id) it else it.copy(share = (it.share+1))
        }
        data.value=posts
    }



    override fun save(post: Post) {
        if (post.id ==0L){
            val newId = (posts.firstOrNull()?.id?:0L)+1
            posts = listOf(
                post.copy(
                    id= newId,
                    author = "Me",
                    liked = false,
                    published = ""
                )
            )+ posts
            data.value=posts
            return
        }
        posts = posts.map{
            if (it.id != post.id) it else it.copy(content = post.content)
        }
        data.value=posts



    }


}


